/**
 * Copyright 2017 Hewlett Packard Enterprise Development LP.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 * 
 */


package org.hpe.labs.AmselRelease;

import java.util.Hashtable;

/**
 * A generator for network symptoms injected from the server side. This generator is
 * intended for symptoms produced by a malware C&C server. If you are looking for symptoms
 * generated by a malware client, you may have more luck with NetworkSymptomInjectorClient. 
 * 
 * Parameters expected in configuration file:
 * 
 * 
 * 
 * **** The following parameters are not yet supported, but will be in due time. ****
 * 
 * OperationalPhasesProcess -- classname for the operational-phases process
 * OperationalPhasesProcessConfig -- configuration file for the operational-phases process
 * 
 * Integer runLength   -- Length of the run in seconds.
 * 
 * @author Philipp Reinecke, Hewlett Packard Labs Bristol, philipp.reinecke@hpe.com or philipp.reinecke@fu-berlin.de
 *
 */

public class NetworkSymptomInjectorServer {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		if (args.length != 1) {
			System.err.println("Please provide the name of exactly one configuration file.");
			System.exit(-1);
		}
		
		// Read config file(s).
		Hashtable<String, String> config = Util.readConfigFile(args[0]);
		
		System.out.println("Configuration: " + config);
		
		// Create processes.
		try {
			OperationalPhasesProcess opp = (OperationalPhasesProcess) Util.loadModule(config.get("OperationalPhasesProcess"));
			opp.configure(Util.readConfigFile(config.get("OperationalPhasesProcessConfig")));
			opp.startBehaviour();
			
			int runLength =	Integer.parseInt(config.get("runLength"));
			System.out.println("Running for " + runLength + " seconds.");
			Thread.sleep(runLength * 1000);
			
			System.out.println("STOPPING.");
			
			Util.exitAllThreads = true;
			opp.stopBehaviour();
			System.out.println("STOPPED.");
			
		
		} catch (Exception e) {
			System.err.println("Exception caught: " + e);
			e.printStackTrace();
			System.exit(-1);
		}
		
	}

}
